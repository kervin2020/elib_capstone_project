#!/usr/bin/env node /** * Script de vérification de la structure et de la logique du frontend E-Lib */ const fs = require('fs'); const path = require('path'); function checkFileExists(filePath, description) { if (fs.existsSync(filePath)) { console.log(`OK ${description}: ${filePath}`); return true; } else { console.log(`MANQUANT ${description}: ${filePath}`); return false; } } function checkComponentStructure() { console.log('\n Vérification de la structure des composants...'); const componentFiles = [ 'src/components/common/Header.jsx', 'src/components/common/Footer.jsx', 'src/components/common/BookCard.jsx', 'src/components/common/Modal.jsx', 'src/components/common/Toast.jsx', 'src/components/common/LoadingSpinner.jsx', 'src/components/auth/LoginForm.jsx', 'src/components/auth/RegisterForm.jsx', 'src/components/books/BookDetailModal.jsx', 'src/components/books/AddBookModal.jsx' ]; let componentsOk = 0; for (const file of componentFiles) { if (checkFileExists(file, 'Composant')) { componentsOk++; } } return componentsOk >= componentFiles.length * 0.8; // 80% des composants } function checkContextStructure() { console.log('\n Vérification des contextes...'); const contextFiles = [ 'src/contexts/AuthContext.jsx', 'src/contexts/BookContext.jsx', 'src/contexts/LoanContext.jsx', 'src/contexts/AdminContext.jsx', 'src/contexts/ToastContext.jsx' ]; let contextsOk = 0; for (const file of contextFiles) { if (checkFileExists(file, 'Contexte')) { contextsOk++; } } return contextsOk >= contextFiles.length * 0.8; // 80% des contextes } function checkPageStructure() { console.log('\n Vérification des pages...'); const pageFiles = [ 'src/pages/HomePage.jsx', 'src/pages/BooksPage.jsx', 'src/pages/LoansPage.jsx', 'src/pages/AdminPage.jsx' ]; let pagesOk = 0; for (const file of pageFiles) { if (checkFileExists(file, 'Page')) { pagesOk++; } } return pagesOk >= pageFiles.length * 0.8; // 80% des pages } function checkRouting() { console.log('\nVerification du routage...'); if (!checkFileExists('src/App.jsx', 'App principal')) { return false; } try { const appContent = fs.readFileSync('src/App.jsx', 'utf8'); const routingFeatures = []; // Vérifier React Router if (appContent.includes('react-router-dom')) { routingFeatures.push('React Router'); console.log(' React Router importe'); } else { console.log(' React Router manquant'); } // Vérifier les routes if (appContent.includes('Routes') && appContent.includes('Route')) { routingFeatures.push('Route Components'); console.log(' Composants de route presents'); } else { console.log(' Composants de route manquants'); } // Vérifier la navigation if (appContent.includes('Navigate')) { routingFeatures.push('Navigation'); console.log(' OK Navigation présente'); } else { console.log(' ERREUR Navigation manquante'); } // Vérifier les routes protégées if (appContent.includes('ProtectedRoute')) { routingFeatures.push('Protected Routes'); console.log(' OK Routes protégées présentes'); } else { console.log(' ERREUR Routes protégées manquantes'); } return routingFeatures.length >= 3; } catch (error) { console.log(` ERREUR Erreur lors de l'analyse: ${error.message}`); return false; } } function checkStateManagement() { console.log('\n Vérification de la gestion d\'état...'); try { const authContext = fs.readFileSync('src/contexts/AuthContext.jsx', 'utf8'); const bookContext = fs.readFileSync('src/contexts/BookContext.jsx', 'utf8'); const stateFeatures = []; // Vérifier useReducer if (authContext.includes('useReducer')) { stateFeatures.push('useReducer'); console.log(' OK useReducer utilisé'); } else { console.log(' ERREUR useReducer manquant'); } // Vérifier useContext if (authContext.includes('useContext')) { stateFeatures.push('useContext'); console.log(' OK useContext utilisé'); } else { console.log(' ERREUR useContext manquant'); } // Vérifier les actions if (authContext.includes('ACTIONS') || authContext.includes('Actions')) { stateFeatures.push('Actions'); console.log(' OK Actions définies'); } else { console.log(' ERREUR Actions manquantes'); } // Vérifier les providers if (authContext.includes('Provider')) { stateFeatures.push('Providers'); console.log(' OK Providers présents'); } else { console.log(' ERREUR Providers manquants'); } return stateFeatures.length >= 3; } catch (error) { console.log(` ERREUR Erreur lors de l'analyse: ${error.message}`); return false; } } function checkAPIIntegration() { console.log('\n Vérification de l\'intégration API...'); try { const authContext = fs.readFileSync('src/contexts/AuthContext.jsx', 'utf8'); const bookContext = fs.readFileSync('src/contexts/BookContext.jsx', 'utf8'); const apiFeatures = []; // Vérifier Axios if (authContext.includes('axios') || bookContext.includes('axios')) { apiFeatures.push('Axios'); console.log(' OK Axios utilisé'); } else { console.log(' ERREUR Axios manquant'); } // Vérifier les appels API if (authContext.includes('axios.get') || authContext.includes('axios.post')) { apiFeatures.push('API Calls'); console.log(' OK Appels API présents'); } else { console.log(' ERREUR Appels API manquants'); } // Vérifier la gestion des erreurs if (authContext.includes('catch') || bookContext.includes('catch')) { apiFeatures.push('Error Handling'); console.log(' OK Gestion des erreurs présente'); } else { console.log(' ERREUR Gestion des erreurs manquante'); } // Vérifier les intercepteurs if (authContext.includes('interceptors')) { apiFeatures.push('Interceptors'); console.log(' OK Intercepteurs présents'); } else { console.log(' ERREUR Intercepteurs manquants'); } return apiFeatures.length >= 3; } catch (error) { console.log(` ERREUR Erreur lors de l'analyse: ${error.message}`); return false; } } function checkStyling() { console.log('\n Vérification du styling...'); const stylingFiles = [ 'tailwind.config.js', 'postcss.config.js', 'src/index.css', 'src/App.css' ]; let stylingOk = 0; for (const file of stylingFiles) { if (checkFileExists(file, 'Fichier de style')) { stylingOk++; } } // Vérifier Tailwind CSS try { const indexCss = fs.readFileSync('src/index.css', 'utf8'); if (indexCss.includes('@tailwind')) { console.log(' OK Tailwind CSS configuré'); stylingOk++; } else { console.log(' ERREUR Tailwind CSS non configuré'); } } catch (error) { console.log(' ERREUR Erreur lors de la vérification de Tailwind'); } return stylingOk >= 3; } function checkTesting() { console.log('\n Vérification des tests...'); const testFiles = [ 'jest.config.js', 'src/tests/setup.js', 'src/tests/App.test.jsx', 'src/tests/components/Header.test.jsx', 'src/tests/components/BookCard.test.jsx', 'src/tests/contexts/AuthContext.test.jsx', 'src/tests/pages/HomePage.test.jsx', 'src/tests/integration/UserFlow.test.jsx' ]; let testsOk = 0; for (const file of testFiles) { if (checkFileExists(file, 'Fichier de test')) { testsOk++; } } return testsOk >= testFiles.length * 0.8; // 80% des tests } function checkPackageJson() { console.log('\n Vérification du package.json...'); if (!checkFileExists('package.json', 'package.json')) { return false; } try { const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8')); const requiredDeps = [ 'react', 'react-dom', 'react-router-dom', 'axios', 'lucide-react', 'recharts' ]; const requiredDevDeps = [ 'tailwindcss', '@testing-library/react', '@testing-library/jest-dom', 'jest' ]; let depsOk = 0; for (const dep of requiredDeps) { if (packageJson.dependencies && packageJson.dependencies[dep]) { console.log(` OK ${dep} présent`); depsOk++; } else { console.log(` ERREUR ${dep} manquant`); } } let devDepsOk = 0; for (const dep of requiredDevDeps) { if (packageJson.devDependencies && packageJson.devDependencies[dep]) { console.log(` OK ${dep} présent (dev)`); devDepsOk++; } else { console.log(` ERREUR ${dep} manquant (dev)`); } } return depsOk >= requiredDeps.length * 0.8 && devDepsOk >= requiredDevDeps.length * 0.8; } catch (error) { console.log(` ERREUR Erreur lors de l'analyse du package.json: ${error.message}`); return false; } } function main() { console.log(' VÉRIFICATION DE LA STRUCTURE FRONTEND E-LIB'); console.log('=' .repeat(60)); // Vérifier les fichiers principaux console.log('\n📁 Vérification des fichiers principaux...'); const mainFiles = [ 'src/App.jsx', 'src/main.jsx', 'src/index.css', 'src/App.css', 'package.json', 'vite.config.js', 'tailwind.config.js' ]; let mainFilesOk = 0; for (const file of mainFiles) { if (checkFileExists(file, 'Fichier principal')) { mainFilesOk++; } } // Vérifier les composants const componentsOk = checkComponentStructure(); // Vérifier les contextes const contextsOk = checkContextStructure(); // Vérifier les pages const pagesOk = checkPageStructure(); // Vérifier le routage const routingOk = checkRouting(); // Vérifier la gestion d'état const stateOk = checkStateManagement(); // Vérifier l'intégration API const apiOk = checkAPIIntegration(); // Vérifier le styling const stylingOk = checkStyling(); // Vérifier les tests const testsOk = checkTesting(); // Vérifier le package.json const packageOk = checkPackageJson(); // Résumé console.log('\n' + '=' .repeat(60)); console.log(' RÉSUMÉ DE LA VÉRIFICATION'); console.log('=' .repeat(60)); console.log(`📁 Fichiers principaux: ${mainFilesOk}/${mainFiles.length}`); console.log(` Composants: ${componentsOk ? 'OK' : 'ERREUR'}`); console.log(` Contextes: ${contextsOk ? 'OK' : 'ERREUR'}`); console.log(` Pages: ${pagesOk ? 'OK' : 'ERREUR'}`); console.log(` Routage: ${routingOk ? 'OK' : 'ERREUR'}`); console.log(` Gestion d'état: ${stateOk ? 'OK' : 'ERREUR'}`); console.log(` Intégration API: ${apiOk ? 'OK' : 'ERREUR'}`); console.log(` Styling: ${stylingOk ? 'OK' : 'ERREUR'}`); console.log(` Tests: ${testsOk ? 'OK' : 'ERREUR'}`); console.log(` Package.json: ${packageOk ? 'OK' : 'ERREUR'}`); // Score total const checks = [ mainFilesOk >= mainFiles.length * 0.8, componentsOk, contextsOk, pagesOk, routingOk, stateOk, apiOk, stylingOk, testsOk, packageOk ]; const totalScore = checks.filter(Boolean).length; console.log(`\n🎯 Score total: ${totalScore}/10`); if (totalScore >= 8) { console.log(' EXCELLENT! Le frontend est bien structuré'); return true; } else if (totalScore >= 6) { console.log('OK BON! Le frontend est fonctionnel avec quelques améliorations possibles'); return true; } else { console.log('ERREUR ATTENTION! Le frontend nécessite des améliorations'); return false; } } if (require.main === module) { const success = main(); process.exit(success ? 0 : 1); } module.exports = { main }; 